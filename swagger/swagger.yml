openapi: 3.0.4
info:
  title: API de Tienda - My Store
  description: |-
    Esta es la documentación de la API de la tienda. Aquí encontrarás información sobre los endpoints disponibles, sus parámetros y respuestas.

    Algunos enlaces útiles:
    - [GitHub](https://github.com/nicoarbelaez/platzi-my-store)
    - [Linkedin - Nicolas Arbelaez Tapias](https://www.linkedin.com/in/nicolas-arbelaez-tapias)
    - [Frontend - Jorge Velasquez](https://picksy-ochre.vercel.app/)
    - [Repositorio Frontend - Picksy](https://github.com/jevg2003/picksy)
  license:
    name: MIT
    url: https://github.com/nicoarbelaez/platzi-my-store/blob/main/LICENSE
  version: 1.0.0
externalDocs:
  description: Más información sobre la API
  url: https://tienda.com/documentacion
servers:
  - url: http://{host}:{port}/api/v1
tags:
  - name: Productos
    description: Endpoints relacionados con productos
  - name: Usuarios
    description: Endpoints relacionados con usuarios
  - name: Clientes
    description: Endpoints relacionados con clientes
  - name: Categorías
    description: Endpoints relacionados con categorías
  - name: Órdenes
    description: Endpoints relacionados con órdenes
paths:
  /products:
    get:
      tags:
        - Productos
      summary: Obtener todos los productos
      description: Devuelve una lista de productos con paginación y filtros opcionales.
      parameters:
        - name: page
          in: query
          description: Número de página
          schema:
            type: integer
        - name: size
          in: query
          description: Tamaño de la página
          schema:
            type: integer
        - name: min_price
          in: query
          description: Precio mínimo
          schema:
            type: number
        - name: max_price
          in: query
          description: Precio máximo
          schema:
            type: number
        - name: search
          in: query
          description: Término de búsqueda
          schema:
            type: string
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  page:
                    type: integer
                  size:
                    type: integer
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
  /products/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID del producto
        schema:
          type: integer
    get:
      tags:
        - Productos
      summary: Obtener un producto por ID
      responses:
        '200':
          description: Detalles del producto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Producto no encontrado
    post:
      tags:
        - Productos
      summary: Crear un nuevo producto
      requestBody:
        description: Datos del producto a crear
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - Productos
      summary: Actualizar un producto existente
      requestBody:
        description: Datos del producto a actualizar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Producto no encontrado
    delete:
      tags:
        - Productos
      summary: Eliminar un producto por ID
      responses:
        '204':
          description: Producto eliminado exitosamente
        '404':
          description: Producto no encontrado
  /users:
    get:
      tags:
        - Usuarios
      summary: Obtener todos los usuarios
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Usuarios
      summary: Crear un nuevo usuario
      requestBody:
        description: Datos del usuario a crear
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID del usuario
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Usuarios
      summary: Obtener un usuario por ID
      responses:
        '200':
          description: Detalles del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado
    put:
      tags:
        - Usuarios
      summary: Actualizar un usuario existente
      requestBody:
        description: Datos del usuario a actualizar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado
    delete:
      tags:
        - Usuarios
      summary: Eliminar un usuario por ID
      responses:
        '204':
          description: Usuario eliminado exitosamente
        '404':
          description: Usuario no encontrado
  /categories:
    get:
      tags:
        - Categorías
      summary: Obtener todas las categorías
      responses:
        '200':
          description: Lista de categorías
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /categories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID de la categoría
        schema:
          type: integer
    get:
      tags:
        - Categorías
      summary: Obtener una categoría por ID
      responses:
        '200':
          description: Detalles de la categoría
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Categoría no encontrada
    post:
      tags:
        - Categorías
      summary: Crear una nueva categoría
      requestBody:
        description: Datos de la categoría a crear
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Categoría creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    put:
      tags:
        - Categorías
      summary: Actualizar una categoría existente
      requestBody:
        description: Datos de la categoría a actualizar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Categoría actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Categoría no encontrada
    delete:
      tags:
        - Categorías
      summary: Eliminar una categoría por ID
      responses:
        '204':
          description: Categoría eliminada exitosamente
        '404':
          description: Categoría no encontrada
  /orders:
    get:
      tags:
        - Órdenes
      summary: Obtener todas las órdenes
      responses:
        '200':
          description: Lista de órdenes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - Órdenes
      summary: Crear una nueva orden
      requestBody:
        description: Datos de la orden a crear
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Orden creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID de la orden
        schema:
          type: integer
    get:
      tags:
        - Órdenes
      summary: Obtener una orden por ID
      responses:
        '200':
          description: Detalles de la orden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Orden no encontrada
    put:
      tags:
        - Órdenes
      summary: Actualizar una orden existente
      requestBody:
        description: Datos de la orden a actualizar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Orden actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Orden no encontrada
    delete:
      tags:
        - Órdenes
      summary: Eliminar una orden por ID
      responses:
        '204':
          description: Orden eliminada exitosamente
        '404':
          description: Orden no encontrada
  /customers:
    get:
      tags:
        - Clientes
      summary: Obtener todos los clientes
      description: Devuelve una lista de todos los clientes registrados.
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      tags:
        - Clientes
      summary: Crear un nuevo cliente
      description: Crea un nuevo cliente con los datos proporcionados.
      requestBody:
        description: Datos del cliente a crear
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Cliente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID del cliente
        schema:
          type: integer
    get:
      tags:
        - Clientes
      summary: Obtener un cliente por ID
      description: Devuelve los detalles de un cliente específico.
      responses:
        '200':
          description: Detalles del cliente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Cliente no encontrado
    put:
      tags:
        - Clientes
      summary: Actualizar un cliente existente
      description: Actualiza los datos de un cliente específico.
      requestBody:
        description: Datos del cliente a actualizar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Cliente actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Cliente no encontrado
    patch:
      tags:
        - Clientes
      summary: Actualizar parcialmente un cliente existente
      description: Actualiza parcialmente los datos de un cliente específico.
      requestBody:
        description: Datos del cliente a actualizar parcialmente
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Cliente actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Cliente no encontrado
    delete:
      tags:
        - Clientes
      summary: Eliminar un cliente por ID
      description: Elimina un cliente específico por su ID.
      responses:
        '204':
          description: Cliente eliminado exitosamente
        '404':
          description: Cliente no encontrado
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        description:
          type: string
        categoryId:
          type: integer
        stock:
          type: integer
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        role:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
        customerId:
          type: integer
        status:
          type: string
        createdAt:
          type: string
          format: date-time
    Customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        lastName:
          type: string
        phone:
          type: string
        createdAt:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
